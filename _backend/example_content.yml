
// ตัวอย่าง 1 //

<div class="col-lg-3 text-center">
    <img style="width: 100%;" src="https://cwatch.comodo.com/images-new/sql-injection-attack.png">
</div>
<div class="col-lg-9 mt-3">
    <h5>SQL Injection คืออะไร</h5>
    SQL Injection เป็นเทคนิคที่ใช้ประโยชน์จากส่งคำสั่ง SQL
    ผ่านทางเว็บแอพพลิเคชันเพื่อไปโจมตีระบบฐานข้อมูลหลังบ้าน โดยอาศัยช่องโหว่ของการใส่ข้อมูล input
    ของผู้ใช้ที่สามารถตรวจสอบรูปแบบการโจมตีได้อย่างจำกัด
    แฮ็คเกอร์รู้ดีว่านักเขียนโปรแกรมจะนำข้อมูลที่ผู้ใช้
    input ลงไป ไปใช้เป็นส่วนหนึ่งของคำสั่ง SQL เพื่อส่งไปยังระบบฐานข้อมูล จึงได้แอบฝังคำสั่ง SQL
    บางอย่างลงไปใน input เหล่านั้นด้วย
    ส่งผลให้แฮ็คเกอร์สามารถดึงข้อมูลหรือเปลี่ยนแปลงแก้ไขข้อมูลในระบบฐานข้อมูลตามคำสั่ง SQL
    ที่แอบฝังลงไปได้ทันที
    ยกตัวอย่างง่ายๆที่พบเห็นบ่อยๆ คือ “OR 1=1” ที่นิยมใช้เพื่อบายพาสการพิสูจน์ตัวตน
    ปกติแล้วหน้าพิสูจน์ตัวตนจะมีช่องให้ใส่ชื่อผู้ใช้และรหัสผ่าน
    ซึ่งนักเขียนโปรแกรมก็จะนำข้อมูลที่ผู้ใช้กรอกลงไป ไปตรวจสอบกับระบบฐานข้อมูลโดยใช้คำสั่ง
</div>
<hr class="mt-3">



// ตัวอย่าง 2 //

<div class="col-lg-9 mt-3">
    <h5>ความเชื่อผิดๆเกี่ยวกับ SQL Injection</h5>
    ทั้งๆที่ปัญหา SQL Injection มีทางออกให้แล้วเป็นเวลามากกว่า 10 ปี
    โดยการใช้เว็บแอพพลิเคชันไฟร์วอลล์และการตรวจสอบโค้ดอย่างรอบคอบ อย่างไรก็ตาม
    เรายังคงพบว่าการรั่วไหลของข้อมูลส่วนใสญ่ โดยเฉพาะบัตรเครดิต ยังคงเกิดจาก SQL Injection อยู่ดี
    เนื่องมาจาก
</div>
<div class="col-lg-3 text-center">
    <img style="width: 100%;"
        src="https://scdn1.plesk.com/wp-content/uploads/2019/01/24153924/prevent-sql-exploit-icon.png">
</div>
<hr class="mt-3">



// ตัวอย่าง 3 //

<div class="col-lg-12 mt-3">
    <h5>SQL Injection คืออะไร</h5>
    SQL Injection เป็นเทคนิคที่ใช้ประโยชน์จากส่งคำสั่ง SQL
    ผ่านทางเว็บแอพพลิเคชันเพื่อไปโจมตีระบบฐานข้อมูลหลังบ้าน โดยอาศัยช่องโหว่ของการใส่ข้อมูล input
    ของผู้ใช้ที่สามารถตรวจสอบรูปแบบการโจมตีได้อย่างจำกัด
    แฮ็คเกอร์รู้ดีว่านักเขียนโปรแกรมจะนำข้อมูลที่ผู้ใช้
    input ลงไป ไปใช้เป็นส่วนหนึ่งของคำสั่ง SQL เพื่อส่งไปยังระบบฐานข้อมูล จึงได้แอบฝังคำสั่ง SQL
    บางอย่างลงไปใน input เหล่านั้นด้วย
    ส่งผลให้แฮ็คเกอร์สามารถดึงข้อมูลหรือเปลี่ยนแปลงแก้ไขข้อมูลในระบบฐานข้อมูลตามคำสั่ง SQL
    ที่แอบฝังลงไปได้ทันที
    ยกตัวอย่างง่ายๆที่พบเห็นบ่อยๆ คือ “OR 1=1” ที่นิยมใช้เพื่อบายพาสการพิสูจน์ตัวตน
    ปกติแล้วหน้าพิสูจน์ตัวตนจะมีช่องให้ใส่ชื่อผู้ใช้และรหัสผ่าน
    ซึ่งนักเขียนโปรแกรมก็จะนำข้อมูลที่ผู้ใช้กรอกลงไป ไปตรวจสอบกับระบบฐานข้อมูลโดยใช้คำสั่ง
</div>
<hr class="mt-3">



// ตัวอย่าง 4 //

<div class="col-lg-12 mt-3 text-center">
    <h5>ความเชื่อผิดๆเกี่ยวกับ SQL Injection</h5>
    ทั้งๆที่ปัญหา SQL Injection มีทางออกให้แล้วเป็นเวลามากกว่า 10 ปี
    โดยการใช้เว็บแอพพลิเคชันไฟร์วอลล์และการตรวจสอบโค้ดอย่างรอบคอบ อย่างไรก็ตาม
    เรายังคงพบว่าการรั่วไหลของข้อมูลส่วนใสญ่ โดยเฉพาะบัตรเครดิต ยังคงเกิดจาก SQL Injection อยู่ดี
    เนื่องมาจาก
</div>
<hr class="mt-3">



// ตัวอย่าง 5 //

<div class="col-lg-12 mt-3 text-center">
    <h5>ความเชื่อผิดๆเกี่ยวกับ SQL Injection</h5>
    <img style="width: 100%;"
        src="https://www.veracode.com/sites/default/files/2021-03/veracode-soss-sql-injection.png">
    <div class="mt-3">
        ทั้งๆที่ปัญหา SQL Injection มีทางออกให้แล้วเป็นเวลามากกว่า 10 ปี
        โดยการใช้เว็บแอพพลิเคชันไฟร์วอลล์และการตรวจสอบโค้ดอย่างรอบคอบ อย่างไรก็ตาม
        เรายังคงพบว่าการรั่วไหลของข้อมูลส่วนใสญ่ โดยเฉพาะบัตรเครดิต ยังคงเกิดจาก SQL Injection
        อยู่ดี เนื่องมาจาก
    </div>
</div>
<hr class="mt-3">